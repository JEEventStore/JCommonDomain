<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.jeecqrs</groupId>
        <artifactId>jcommondomain-parent</artifactId>
        <version>1.1-SNAPSHOT</version>
    </parent>

    <artifactId>jcommondomain-persistence-jeeventstore</artifactId>
    <packaging>jar</packaging>

    <name>Common Domain for Java: JEEventStore Persistence</name>

    <dependencies> 

        <dependency>
            <groupId>org.jeeventstore</groupId>
            <artifactId>jeeventstore-core</artifactId>
            <version>1.1.7</version>
        </dependency>

        <dependency>
            <groupId>org.jeecqrs</groupId>
            <artifactId>jcommondomain-core</artifactId>
        </dependency>

        <dependency>
            <groupId>org.jodah</groupId>
            <artifactId>typetools</artifactId>
            <version>0.3.0</version>
        </dependency>

    </dependencies>

    <dependencyManagement>
        <dependencies>

            <!-- Java EE 6.0 API.  Here's why we are not using javaee-api:
            https://community.jboss.org/wiki/WhatsTheCauseOfThisExceptionJavalangClassFormatErrorAbsentCode --> 
            <dependency>
                <groupId>org.jboss.spec</groupId>
                <artifactId>jboss-javaee-6.0</artifactId>
                <version>1.0.0.Final</version>
                <type>pom</type>  
                <scope>provided</scope>
            </dependency>

            <dependency> 
                <groupId>javax.enterprise</groupId> 
                <artifactId>cdi-api</artifactId>
                <version>1.0-SP4</version>
                <scope>provided</scope>
            </dependency>

        </dependencies>
    </dependencyManagement>

    <profiles>
        <profile>
            <!-- The default profile skips all tests, though you can tune 
            it to run just unit tests based on a custom pattern -->
            <!-- Seperate profiles are provided for running all tests, including 
            Arquillian tests that execute in the specified container -->
            <id>default</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <skipTests>true</skipTests>
            </properties>
            <dependencies>
                <dependency>
                    <groupId>javax</groupId>   
                    <artifactId>javaee-api</artifactId>   
                    <version>6.0</version> 
                    <scope>provided</scope>
                </dependency>
            </dependencies>
        </profile>

        <profile>
            <!-- An optional Arquillian testing profile that executes tests 
            in a remote JBoss AS instance -->
            <!-- Run with: mvn clean test -Parq-jbossas-remote -->
            <id>arq-jbossas-remote</id>
            <dependencies>
                <dependency>
                    <groupId>org.jboss.spec</groupId>
                    <artifactId>jboss-javaee-6.0</artifactId>
                    <type>pom</type>
                </dependency>
                <dependency>
                    <groupId>org.jboss.as</groupId>
                    <artifactId>jboss-as-arquillian-container-remote</artifactId>
                    <version>${version.org.jboss.as}</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <systemPropertyVariables>
                                <!--arquillian.launch>jbossas-remote</arquillian.launch-->
                                <defaultProtocol>
                                    <![CDATA[<defaultProtocol type="Servlet 3.0" />]]>
                                </defaultProtocol>
                            </systemPropertyVariables>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <!-- An optional Arquillian testing profile that executes tests 
            in an embedded Glassfish instance -->
            <!-- Run with: mvn clean test -Parq-glassfish-embedded -->
            <id>arq-glassfish-embedded</id>
            <dependencies>
                
                <dependency>
                    <groupId>org.glassfish.main.extras</groupId>
                    <artifactId>glassfish-embedded-all</artifactId>
                    <version>3.1.2.2</version>
                </dependency>

                <dependency>
                    <groupId>org.jboss.arquillian.container</groupId>
                    <artifactId>arquillian-glassfish-embedded-3.1</artifactId>
                    <version>1.0.0.CR4</version>
                    <scope>test</scope>
                </dependency>

                <dependency>
                    <groupId>log4j</groupId>
                    <artifactId>log4j</artifactId>
                    <version>1.2.16</version>
                </dependency>

                <dependency>
                    <groupId>mysql</groupId>
                    <artifactId>mysql-connector-java</artifactId>
                    <version>5.1.26</version>
                </dependency> 

                <dependency>
                    <groupId>postgresql</groupId>
                    <artifactId>postgresql</artifactId>
                    <version>9.1-901-1.jdbc4</version>
                </dependency>

            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <systemPropertyVariables>
                                <arquillian.launch>glassfish-embedded</arquillian.launch>
                                <glassfishDatabase>${glassfish.database}</glassfishDatabase>
                                <java.util.logging.config.file>
                                    ${basedir}/src/test/resources/customlogging.properties
                                </java.util.logging.config.file>
                            </systemPropertyVariables>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <!-- An optional Arquillian testing profile that executes tests 
            in a remote Apache TomEE instance -->
            <!-- Run with: mvn clean test -Parq-tomee-embedded -->
            <id>arq-tomee-embedded</id>
            <dependencies>

                <dependency>
                    <groupId>org.apache.openejb</groupId>
                    <artifactId>javaee-api</artifactId>
                    <version>6.0-5</version>
                </dependency>

                <dependency>
                    <groupId>org.apache.openejb</groupId>
                    <artifactId>apache-tomee</artifactId>
                    <version>${tomee.version}</version>
                    <classifier>${tomee.classifier}</classifier>
                    <type>zip</type>
                </dependency>

                <dependency>
                    <groupId>org.apache.openejb</groupId>
                    <artifactId>arquillian-tomee-embedded</artifactId>
                    <version>${tomee.version}</version>
                    <scope>test</scope>
                </dependency>

            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <systemPropertyVariables>
                                <tomee.classifier>${tomee.classifier}</tomee.classifier>
                                <tomee.version>${tomee.version}</tomee.version>
                                <tomee.httpPort>-1</tomee.httpPort>
                                <tomee.stopPort>-1</tomee.stopPort>
                            </systemPropertyVariables>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

    </profiles>

</project>
